# Edge 监控套件配置
# 可选择性安装 Prometheus/Grafana/AlertManager

# 全局配置
global:
  # 是否启用监控套件
  enabled: true
  # 命名空间
  namespace: observability-system

# Prometheus 配置
prometheus:
  enabled: true
  image:
    repository: prom/prometheus
    tag: v2.45.0
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 9090

  # 存储配置
  persistence:
    enabled: true
    size: 20Gi
    storageClassName: ""

  # 资源限制
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  # 配置文件
  config:
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    rule_files:
      - "/etc/prometheus/rules/*.yml"
      - "/etc/prometheus/rules/recording-rules.yaml"
    scrape_configs:
      - job_name: 'edge-apiserver'
        static_configs:
          - targets: ['edge-apiserver:8083']
        metrics_path: '/metrics'
        relabel_configs:
          # 添加集群标签
          - target_label: cluster
            replacement: host
      - job_name: 'edge-controller'
        static_configs:
          - targets: ['edge-controller:8082']
        metrics_path: '/metrics'
        relabel_configs:
          # 添加集群标签
          - target_label: cluster
            replacement: host
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_endpoints_name]
            action: keep
            regex: edge-node-exporter
          # 添加集群标签
          - target_label: cluster
            replacement: host
          # 从 node_name 标签获取节点名，并设置为 instance
          - source_labels: [__meta_kubernetes_endpoint_node_name]
            target_label: instance
          # 添加节点名到 node 标签的映射
          - source_labels: [__meta_kubernetes_endpoint_node_name]
            target_label: node
      # Kubernetes 集群基础监控
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          # Edge 平台标签映射
          - source_labels: [__meta_kubernetes_node_label_theriseunion_io_nodegroup]
            target_label: nodegroup
          - source_labels: [__meta_kubernetes_node_label_theriseunion_io_managed]
            target_label: edge_managed
          - source_labels: [__meta_kubernetes_node_label_theriseunion_io_username]
            target_label: creator
          # 添加节点名到 node 标签的映射 - 保持与 cadvisor 配置一致
          - source_labels: [__meta_kubernetes_node_name]
            target_label: node
          # 添加集群标签 - 保持与其他 job 一致
          - target_label: cluster
            replacement: host
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
      # 原 kubernetes-cadvisor job 已禁用，使用独立的 cAdvisor DaemonSet 替代
      # 原因：kubelet 的 cAdvisor 在 Docker CRI 环境下无法提供正确的容器标签
      # 解决方案：独立部署 cAdvisor DaemonSet，配置正确的 ServiceMonitor
      #
      # - job_name: 'kubernetes-cadvisor' # 已禁用
      #   ... 原配置已移除，由独立 cAdvisor 替代 ...

      # 独立 cAdvisor 采集配置 - 基于 SUSE KB 000020951 官方解决方案
      - job_name: 'cadvisor'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: edge-cadvisor
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http-metrics
          # 添加集群标签保持一致性
          - target_label: cluster
            replacement: host
          # 设置 job 标签为 kubelet 以保持 PromQL 查询兼容性
          - target_label: job
            replacement: kubelet
          # 设置 metrics_path 标签保持 PromQL 查询兼容性
          - target_label: metrics_path
            replacement: /metrics/cadvisor
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
        # 关键修复：使用容器标签恢复正确的 Kubernetes 元数据
        metric_relabel_configs:
          # 从容器标签恢复 Pod 名称
          - source_labels: [container_label_io_kubernetes_pod_name]
            regex: (.+)
            target_label: pod
          # 从容器标签恢复 Container 名称 (Container API 的关键字段)
          - source_labels: [container_label_io_kubernetes_container_name]
            regex: (.+)
            target_label: container
          # 从容器标签恢复 Namespace
          - source_labels: [container_label_io_kubernetes_pod_namespace]
            regex: (.+)
            target_label: namespace
          # 兜底保护：为仍然为空的字段设置默认值
          - source_labels: [container]
            regex: ^$
            target_label: container
            replacement: unknown-container
          - source_labels: [image]
            regex: ^$
            target_label: image
            replacement: unknown-image
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          # 添加集群标签
          - target_label: cluster
            replacement: host
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          # Pod Edge 平台标签映射
          - source_labels: [__meta_kubernetes_pod_label_theriseunion_io_workspace]
            target_label: workspace
          - source_labels: [__meta_kubernetes_pod_label_theriseunion_io_managed]
            target_label: edge_managed
          - source_labels: [__meta_kubernetes_pod_label_theriseunion_io_username]
            target_label: creator
          # 添加集群标签
          - target_label: cluster
            replacement: host
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
      # 专用的 kube-state-metrics 服务发现配置 - 修复工作负载级别指标
      - job_name: 'kube-state-metrics'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: edge-kube-state-metrics
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http-metrics
          # 添加集群标签
          - target_label: cluster
            replacement: host
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name

# Grafana 配置
grafana:
  enabled: true
  image:
    repository: grafana/grafana
    tag: 10.0.0
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 3000

  # 默认管理员密码
  adminPassword: admin123

  # 持久化存储
  persistence:
    enabled: true
    size: 10Gi
    storageClassName: ""

  # 资源限制
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"

  # 数据源配置
  datasources:
    - name: Prometheus
      type: prometheus
      url: http://edge-prometheus:9090
      access: proxy
      isDefault: true

# AlertManager 配置
alertmanager:
  enabled: true
  image:
    repository: prom/alertmanager
    tag: v0.25.0
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 9093

  # 资源限制
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"

  # 告警配置
  config:
    global:
      smtp_smarthost: 'localhost:587'
      smtp_from: 'alertmanager@edge.local'
    route:
      group_by: ['alertname']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
    receivers:
      - name: 'web.hook'
        webhook_configs:
          - url: 'http://127.0.0.1:5001/'

# Kube-state-metrics 配置
kubeStateMetrics:
  enabled: true
  image:
    repository: registry.k8s.io/kube-state-metrics/kube-state-metrics
    tag: v2.10.0
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 8080

  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"

# Node-exporter 配置
nodeExporter:
  enabled: true
  image:
    repository: prom/node-exporter
    tag: v1.6.0
    pullPolicy: IfNotPresent

  # 以 DaemonSet 方式部署到所有节点
  hostNetwork: true
  hostPID: true

  service:
    type: ClusterIP
    port: 9100

  resources:
    requests:
      memory: "32Mi"
      cpu: "25m"
    limits:
      memory: "64Mi"
      cpu: "50m"

# Standalone cAdvisor 配置 - 修复 Docker CRI 环境下的容器监控问题
# 基于 SUSE KB 000020951 官方解决方案
cadvisor:
  enabled: true
  image:
    repository: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/gcr.io/cadvisor/cadvisor
    tag: v0.47.0
    pullPolicy: IfNotPresent

  # cAdvisor 需要访问主机资源
  hostNetwork: false
  privileged: true

  service:
    type: ClusterIP
    port: 8080

  resources:
    requests:
      memory: "200Mi"
      cpu: "150m"
    limits:
      memory: "400Mi"
      cpu: "300m"

  # cAdvisor 特定的挂载配置
  volumes:
    - name: rootfs
      hostPath:
        path: /
    - name: var-run
      hostPath:
        path: /var/run
    - name: sys
      hostPath:
        path: /sys
    - name: docker
      hostPath:
        path: /var/lib/docker
    - name: dev-disk
      hostPath:
        path: /dev/disk

  # ServiceMonitor 配置，使用正确的 metric relabeling
  serviceMonitor:
    enabled: true
    metricRelabelings:
      # 从容器标签恢复 Pod 名称
      - sourceLabels: [container_label_io_kubernetes_pod_name]
        targetLabel: pod
      # 从容器标签恢复 Container 名称 (Container API 关键字段)
      - sourceLabels: [container_label_io_kubernetes_container_name]
        targetLabel: container
      # 从容器标签恢复 Namespace
      - sourceLabels: [container_label_io_kubernetes_pod_namespace]
        targetLabel: namespace
      # 添加集群标签保持一致性
      - targetLabel: cluster
        replacement: host

# Monitoring Service 配置 - 提供统一的监控数据 API
monitoringService:
  enabled: true
  replicas: 1
  image:
    repository: quanzhenglong.com/edge/monitoring-service
    tag: openapi-v1.1
    pullPolicy: Always

  service:
    type: ClusterIP
    port: 9083
    targetPort: 9083

  # 资源限制
  resources:
    requests:
      memory: "100Mi"
      cpu: "50m"
    limits:
      memory: "400Mi"
      cpu: "200m"

# ServiceMonitor 配置 - 自动发现服务
serviceMonitor:
  enabled: false
  # 为 edge 组件创建 ServiceMonitor
  targets:
    - name: edge-apiserver
      service: edge-apiserver
      port: metrics
      path: /metrics
    - name: edge-controller
      service: edge-controller
      port: metrics
      path: /metrics